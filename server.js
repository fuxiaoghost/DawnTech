process.env.VUE_ENV = 'server'
const isProd = process.env.NODE_ENV === 'production'

const fs = require('fs')
const path = require('path')
const express = require('express')
const compression = require('compression')
const serialize = require('serialize-javascript')
const resolve = file => path.resolve(__dirname, file)
const proxy = require('express-http-proxy');
const app = express()

let indexHTML // generated by html-webpack-plugin
let renderer  // created from the webpack-generated server bundle
if (isProd) {
    // in production: create server renderer and index HTML from real fs
    renderer = createRenderer(fs.readFileSync(resolve('./dist/server.js'), 'utf-8'))
    indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'))
} else {
    // in development: setup the dev server with watch and hot-reload,
    // and update renderer / index HTML on file change.
    require('./build/setup-dev-server')(app, {
        bundleUpdated: bundle => {
            renderer = createRenderer(bundle)
        },
        indexUpdated: index => {
            indexHTML = parseIndex(index)
        }
    })
}

function createRenderer(bundle) {
    // https://github.com/vuejs/vue/blob/next/packages/vue-server-renderer/README.md#why-use-bundlerenderer
    return require('vue-server-renderer').createBundleRenderer(bundle, {
        cache: require('lru-cache')({
            max: 1000,
            maxAge: 1000 * 60 * 15
        })
    })
}

function parseIndex(template) {
    const contentMarker = '<!-- APP -->'
    const i = template.indexOf(contentMarker)
    return {
        head: template.slice(0, i),
        tail: template.slice(i + contentMarker.length)
    }
}

const serve = (path, cache) => express.static(resolve(path), {
    maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})

app.use(compression({ threshold: 0 }))
app.use('/dist', serve('./dist'))
app.use('/assets', serve('./assets'))

// set the proxy to api
// todo: find better solution, 
process.env.APP_API = process.env.APP_API || 'http://api.dawntech.top:3000'
app.use('/api', proxy(process.env.APP_API))

app.get('*', (req, res) => {
    if (!renderer) {
        return res.end('waiting for compilation... refresh in a moment.')
    }
    res.setHeader("Content-Type", "text/html");
    process.UA = req.headers["user-agent"];
    var s = Date.now()
    const context = { url: req.url }
    const renderStream = renderer.renderToStream(context)
    renderStream.once('data', () => {
        var htmlHead = indexHTML.head;
        //todo: SEM Head will become a plugin, need to reconsitution
        if(context.initialState && context.initialState.htmlHead) {
            htmlHead = indexHTML.head.replace('<!-- TITLE -->', context.initialState.htmlHead.title)
            .replace("|-- DESC --|", context.initialState.htmlHead.desc)
            .replace("|-- KEYWORD --|", context.initialState.htmlHead.keyword);
        }
                
        res.write(htmlHead)
    })

    renderStream.on('data', chunk => {
        res.write(chunk)
    })

    renderStream.on('end', () => {
        if (context.initialState) {
            res.write(`<script>window.__INITIAL_STATE__=${serialize(context.initialState, { isJSON: true })}</script>`);
        }
        res.end(indexHTML.tail)
        // console.log(`${s} whole request: ${Date.now() - s}ms ${req.url}`)
    });

    renderStream.on('error', err => {
        if (err && err.code === '404') {
            res.status(404).end('404 | Page Not Found')
            return
        }
        // Render Error Page or Redirect
        //res.status(500).end('Internal Error 500')
        res.status(500).end('500 | Page Not Found');
        console.error(`error during render : ${req.url}`)
        console.error(err)
    })
})


const port = process.env.PORT || 9095
const ip = process.env.SERVER || '192.168.1.88'
app.listen(port, ip , () => {
    console.log(`server started at ${ip}:${port}`)
})



